const GHN_TOKEN = "568f0428-ff0b-11ef-968a-1659e6af139f"; // Thay b·∫±ng API Token th·ª±c t·∫ø c·ªßa b·∫°n
const apiBase = "https://online-gateway.ghn.vn/shiip/public-api/master-data";
const customerId = document.getElementById("customerId").value
let mylist = document.getElementById("mylist")

function loadTinh() {
    $.ajax({
        url: `${apiBase}/province`,
        type: "GET",
        headers: {"Token": GHN_TOKEN},
        success: function (res) {
            if (res.code === 200) {
                res.data.forEach(item => {
                    $("#tinhCreate").append(`<option value="${item.ProvinceID}">${item.ProvinceName}</option>`);
                });
            }
        }
    });
}

function loadHuyen(tinhCreate) {
    $.ajax({
        url: `${apiBase}/district`,
        type: "POST",
        headers: {"Token": GHN_TOKEN, "Content-Type": "application/json"},
        data: JSON.stringify({province_id: parseInt(tinhCreate)}),
        success: function (res) {
            if (res.code === 200) {
                $("#huyenCreate").html('<option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>');
                res.data.forEach(item => {
                    $("#huyenCreate").append(`<option value="${item.DistrictID}">${item.DistrictName}</option>`);
                });
            }
        }
    });
}

function loadXa(huyenCreate) {
    $.ajax({
        url: `${apiBase}/ward`,
        type: "POST",
        headers: {"Token": GHN_TOKEN, "Content-Type": "application/json"},
        data: JSON.stringify({district_id: parseInt(huyenCreate)}),
        success: function (res) {
            if (res.code === 200) {
                $("#xaCreate").html('<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>');
                res.data.forEach(item => {
                    $("#xaCreate").append(`<option value="${item.WardCode}">${item.WardName}</option>`);
                });
            }
        }
    });
}

// H√†m l·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë
async function getProvinceName(provinceId) {
    try {
        const response = await fetch("https://online-gateway.ghn.vn/shiip/public-api/master-data/province", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Token": GHN_TOKEN
            }
        });

        const data = await response.json();
        if (!data.data) throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu t·ªânh/th√†nh ph·ªë.");
        const province = data.data.find(p => p.ProvinceID == provinceId);
        return province ? province.ProvinceName : "Kh√¥ng x√°c ƒë·ªãnh";
    } catch (error) {
        console.error("L·ªói l·∫•y t·ªânh/th√†nh ph·ªë:", error);
        return "L·ªói l·∫•y d·ªØ li·ªáu";
    }
}

// H√†m l·∫•y danh s√°ch qu·∫≠n/huy·ªán
async function getDistrictName(districtId) {
    try {
        const response = await fetch("https://online-gateway.ghn.vn/shiip/public-api/master-data/district", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Token": GHN_TOKEN
            }
        });

        const data = await response.json();
        if (!data.data) throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu qu·∫≠n/huy·ªán.");
        const district = data.data.find(d => d.DistrictID == districtId);
        return district ? district.DistrictName : "Kh√¥ng x√°c ƒë·ªãnh";
    } catch (error) {
        console.error("L·ªói l·∫•y qu·∫≠n/huy·ªán:", error);
        return "L·ªói l·∫•y d·ªØ li·ªáu";
    }
}

// H√†m l·∫•y danh s√°ch ph∆∞·ªùng/x√£
async function getWardName(districtId, wardId) {
    try {
        if (!districtId) throw new Error("Thi·∫øu district_id!");

        const response = await fetch("https://online-gateway.ghn.vn/shiip/public-api/master-data/ward", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Token": GHN_TOKEN
            },
            body: JSON.stringify({district_id: parseInt(districtId)}) // üî• Quan tr·ªçng: Ph·∫£i g·ª≠i s·ªë, kh√¥ng ph·∫£i chu·ªói!
        });

        const data = await response.json();
        if (!data.data) throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu ph∆∞·ªùng/x√£.");
        const ward = data.data.find(w => w.WardCode == wardId);
        return ward ? ward.WardName : "Kh√¥ng x√°c ƒë·ªãnh";
    } catch (error) {
        console.error("L·ªói l·∫•y ph∆∞·ªùng/x√£:", error);
        return "L·ªói l·∫•y d·ªØ li·ªáu";
    }
}

// th√™m ƒë·ªãa ch·ªâ
$(document).ready(function () {
    loadTinh();
    $("#tinhCreate").change(function () {
        let tinhCreate = $(this).val();
        if (tinhCreate) loadHuyen(tinhCreate);
        $("#huyenCreate").html('<option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>');
        $("#xaCreate").html('<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>');
    });

    $("#huyenCreate").change(function () {
        let huyenCreate = $(this).val();
        if (huyenCreate) loadXa(huyenCreate);
        $("#xaCreate").html('<option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>');
    });

    $("#submit").click(function () {
        let tinhCreate = $("#tinhCreate").val();
        let huyenCreate = $("#huyenCreate").val();
        let xaCreate = $("#xaCreate").val();

        if (!tinhCreate || !huyenCreate || !xaCreate) {
            alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }
        // Ch·ªâ log m√£ c·ªßa t·ªânh, huy·ªán, x√£
        let addressDetail = document.getElementById("diaChiChiTietCreate").value
        let tenNgNhan = document.getElementById("tenNguoiNhan").value
        let soDienThoai = document.getElementById("soDienThoai").value
        console.log("TinhCreate ID:", tinhCreate);
        console.log("HuyenCreate ID:", huyenCreate);
        console.log("XaCreate ID:", xaCreate);
        console.log("CustomerId :", customerId);
        console.log("TenNgNhan:", tenNgNhan);
        console.log("SoDienThoai:", soDienThoai);
        console.log("dia ch·ªâ chi ti·∫øt : ", addressDetail)
        const data = {
            customerID: customerId,  // S·ªë nguy√™n, c√≥ th·ªÉ ƒë·ªÉ null n·∫øu ch∆∞a c√≥ gi√° tr·ªã
            provinceID: tinhCreate,
            districtID: huyenCreate,
            wardID: xaCreate,
            addressStr: addressDetail,
            tenNguoiNhan: tenNgNhan,
            phone: soDienThoai
        };
        createAddress(data)
    });
});
// create
createAddress = (data) => {
    fetch("/api/create-address", {
        method: "POST",
        headers: {
            "content-type": "application/json",
        },
        body: JSON.stringify(data),
    }).then(res => res.json())
        .then(data => {
            console.log("ph·∫£n h·ªìi sau khi th√™m", data);
        })
        .catch(err => console.log(err));
}
// find all
findAll = (id) => {
    fetch("/api/findAll-address-by-id-customer", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(id)
    }).then(res => res.json())
        .then(data => {
            data.forEach(item => {
                let id = item.id;
                let name = item.ten
                let phone = item.soDienThoai
                let ward = item.wardId
                let district = item.districtId
                let province = item.provinceId
                let defaultVL = item.defaultValue
                showAddress(id, name, phone, province, district, ward.toString(), defaultVL)
            })
        }).catch(err => console.log(err));
}
showAddress = async (id, name, phone, province, district, ward, defaultValue) => {
    let liTag = document.createElement("li");
    liTag.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");

    // L·∫•y d·ªØ li·ªáu t·ª´ API
    let provinceName = await getProvinceName(province);
    let districtName = await getDistrictName(district);
    let wardName = await getWardName(district, ward);

    // T·∫°o n·ªôi dung ƒë·ªãa ch·ªâ
    let info = document.createElement("div");
    info.innerHTML = `
        <strong>${name}</strong> - ${phone} <br>
        ${wardName} - ${districtName} - ${provinceName}
    `;

    // N·∫øu l√† m·∫∑c ƒë·ªãnh, th√™m badge hi·ªÉn th·ªã
    if (defaultValue) {
        let defaultBadge = document.createElement("span");
        defaultBadge.innerText = "M·∫∑c ƒë·ªãnh";
        defaultBadge.classList.add("badge", "bg-success", "ms-2");
        info.appendChild(defaultBadge);
    }

    // T·∫°o nh√≥m n√∫t b·∫•m
    let buttonGroup = document.createElement("div");
    buttonGroup.classList.add("btn-group");

    let editBtn = document.createElement("a");
    editBtn.innerText = "S·ª≠a";
    editBtn.classList.add("btn", "btn-warning", "btn-sm");
    editBtn.href = "/showform-update/" + id; // ƒê·∫∑t link ƒë·∫øn Google

    let deleteBtn = document.createElement("button");
    deleteBtn.innerText = "X√≥a";
    deleteBtn.classList.add("btn", "btn-danger", "btn-sm");
    deleteBtn.onclick = () => deleteAddress(id);

    let defaultBtn = document.createElement("button");
    defaultBtn.innerText = "Ch·ªçn m·∫∑c ƒë·ªãnh";
    defaultBtn.classList.add("btn", "btn-primary", "btn-sm");
    defaultBtn.onclick = () => setDefaultAddress(id);

    buttonGroup.appendChild(editBtn);
    buttonGroup.appendChild(deleteBtn);
    if (!defaultValue) {
        buttonGroup.appendChild(defaultBtn);
    }

    // G·∫Øn v√†o `liTag`
    liTag.appendChild(info);
    liTag.appendChild(buttonGroup);

    mylist.appendChild(liTag);
};
findDiaChiById = async (id) => {
    try {
        const response = await fetch("/api/find-address-by-id-address", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(id)
        });

        const result = await response.json();
        return {
            id: result.id,
            province: result.provinceId,
            district: result.districtId,
            ward: result.wardId,
            ten: result.ten,
            sdt: result.soDienThoai,
            defaultValue: result.defaultValue
        };
    } catch (error) {
        console.error("L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:", error);
        return null;
    }
};

function deleteAddress(id) {
    fetch("/api/delete-address", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(id)
    }).then(res => res.text())
        .then(data => {
            alert(data)
            mylist.innerText = ""
            findAll(customerId)

        })
        .catch(err => console.log(err));
}

function setDefaultAddress(id) {
    fetch("/api/set-default-address", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(id)
    }).then(res => res.text())
        .then(data => {
            alert(data)
            mylist.innerText = ""
            findAll(customerId)
        })
        .catch(err => console.log(err));
}


document.addEventListener("DOMContentLoaded", function () {
    findAll(customerId)
})
